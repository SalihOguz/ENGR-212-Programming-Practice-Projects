__author__ = "mustafa salih oguz"
from clusters import *
from Tkinter import *
import anydbm, ttk, tkMessageBox, pickle, tkFileDialog, re, string

class GUI(Frame):
    def __init__(self, root):
        Frame.__init__(self, root)
        self.filePath = ""
        self.courses = {}
        self.lastWords = {}
        self.UI()

    def UI(self):
        def browse(event):
            """runs when pressed browse button. Takes path of chosen file and add course codes to listbox"""
            self.filePath = tkFileDialog.askopenfilename(filetypes=[('Text File', '.txt')], title="Select The File Contains Course Description")
            fileLabel.config(text=self.filePath)
            courses = self.courseCodes()  # taking unique course codes
            self.listCourse.delete(0, END)
            if self.filePath!="":  # adding course codes to the listbox
                for i in courses:
                    self.listCourse.insert(END, i)

        def dataMatrix(event):
            """creating data matrix when pressed show data matrix button"""
            if self.filePath=="":
                return tkMessageBox.showinfo("File Error", "You need to choose a txt file")

            self.createCluster()

            for item in self.canvas.find_all():  # cleaning the canvas for new data
                self.canvas.delete(item)

            courses, words, data = readfile("datamatrix.txt")

            self.canvas.create_text(25, 10, text="Courses")
            yCord=25
            for i in courses:
                self.canvas.create_text(25, yCord, text=i.split()[0:2])  # printing course codes
                yCord+=20
            xCord=80
            for i in words:
                self.canvas.create_text(xCord, 10, text=i)  # printing words
                xCord+=80
            xCord= 80
            yCord=25
            for i in data:
                for j in i:
                    self.canvas.create_text(xCord, yCord, text=int(j))  # printing word counts
                    xCord+=80
                xCord=80
                yCord+=20
            self.canvas.config(scrollregion=self.canvas.bbox(ALL))

        def drawDiagram(event):
            """runs when clicked to the draw diagram button. Calls drawNode recursive function for drawing cluster diagram"""
            if self.filePath=="":
                return tkMessageBox.showinfo("File Error", "You need to choose a txt file")

            for i in self.canvas.find_all():  # cleaning canvas for new data
                self.canvas.delete(i)

            self.createCluster()
            courses, words, data = readfile("datamatrix.txt")

            # a simplified version of drawdendogram that calls drawNodes fucntion which
            self.drawNodes(self.canvas,self.clust, 120, 120, 150.0 / getdepth(self.clust),courses)
            self.canvas.config(scrollregion=self.canvas.bbox(ALL))

        def printDiagram(eveny):
            """printing the diagram that generated by clust2str"""
            if self.filePath=="":
                return tkMessageBox.showinfo("File Error", "You need to choose a txt file")

            self.createCluster()
            courses, words, data = readfile("datamatrix.txt")
            text = clust2str(self.clust, courses)

            for item in self.canvas.find_all():
                self.canvas.delete(item)
            self.canvas.create_text(250, 250, text=text)
            self.canvas.config(scrollregion=self.canvas.bbox(ALL))

        self.grid()
        frame1 = Frame(self)
        frame1.grid(row=0,column=0)

        Label(frame1, text="COURSE ANALYZER - SEHIR LIMITED EDITION",height=2, fg="white", bg="red").grid(row=0, column=0, sticky=EW, columnspan=4)
        Label(frame1, text="Upload a file that contains course descriptions:").grid(row=1, column=1, columnspan=2, sticky=W, padx=20, pady=10)
        Label(frame1, text="Selected File:").grid(row=2, column=1, sticky=W, padx=20, pady=10)

        browseButton= Button(frame1, text="Browse")
        browseButton.grid(row=1, column=3, padx=20, pady=10)

        fileFrame = Frame(frame1, bd=2, relief=GROOVE)
        fileFrame.grid(row=2, column=2, columnspan=2, sticky=W, padx=20, pady=10)

        fileLabel = Label(fileFrame, text="Please select a file")
        fileLabel.grid()

        frame2 = Frame(frame1, bd=2, relief=GROOVE)
        frame2.grid(row=3, column=0, padx=20, pady=20, columnspan=4)


        Label(frame2, text="Similarity Measure:").grid(row=2, column=0)
        Label(frame2, text="Select Course Codes:").grid(row=1, column=2)

        self.similarity = StringVar()
        self.similarity.set("pearson")
        Radiobutton(frame2, text="Pearson", variable=self.similarity, value="pearson").grid(row=1, column=1)
        Radiobutton(frame2, text="Tanimoto", variable=self.similarity, value="tanimoto").grid(row=3, column=1)
        self.choice={"pearson":pearson,"tanimoto":tanimoto}

        scrollCourse = Scrollbar(frame2)
        scrollCourse .grid(row=0,column=5, sticky=W+NS, rowspan=3)
        self.listCourse = Listbox(frame2, yscrollcommand=scrollCourse.set, height=6, selectmode=MULTIPLE)
        self.listCourse .grid(row=0, column=4, sticky=EW, rowspan=3)
        scrollCourse .config(command=self.listCourse .yview)

        drawButton = Button(frame2, text="Draw Hierarchical Cluster Diagram")
        drawButton.grid(row=4, column=0, padx=10, pady=10)

        printButton = Button(frame2, text="Print Hierarchical Cluster as Text")
        printButton.grid(row=4, column=1, padx=10, pady=10)

        showButton = Button(frame2, text="Show Data Matrix")
        showButton.grid(row=4, column=2, padx=10, pady=10)

        scrollCanvasX = Scrollbar(frame2, orient=HORIZONTAL)
        scrollCanvasX .grid(row=6,column=0, sticky=EW, columnspan=10)
        scrollCanvasY = Scrollbar(frame2, orient=VERTICAL)
        scrollCanvasY .grid(row=5,column=10, sticky=NS)
        self.canvas = Canvas(frame2, bg="white", width=200, height=300)
        self.canvas.grid(row=5, column=0,sticky=EW, columnspan=10)
        scrollCanvasY.config(command=self.canvas.yview)
        scrollCanvasX.config(command=self.canvas.xview)

        browseButton.bind("<Button-1>", browse)
        showButton.bind("<Button-1>", dataMatrix)
        drawButton.bind("<Button-1>", drawDiagram)
        printButton.bind("<Button-1>", printDiagram)

    def courseCodes(self):
        """adds course codes to the listbox"""
        text = open(self.filePath, "r")
        courseList=[]
        count=0
        # looks every line of file and takes first word of every two line which is course code
        for i in text:
            count+=1
            if count%2==0:
                continue
            if i.strip().split()[0] not in courseList:
                courseList.append(i.strip().split()[0])
        courseList.sort()
        return courseList
    
    def createCluster(self):
        """creates cluster by opening chosen file, taking chosen course codes from listbox and creating data matrix"""
        text= open(self.filePath,"r")

        # getting chosen course codes from listbox
        selectedIndex = self.listCourse.curselection()
        selected=[]
        for i in selectedIndex:
            selected.append(self.listCourse.get(i))

        # forming dictionary of course code and decription
        dataDict={}
        count=0
        index=""
        take=False
        for i in text:
            count+=1
            if count%2!=0:  # taking course code
                if i.strip().split()[0] in selected:
                    dataDict[i.strip()]=""
                    index=i.strip()
                    take=True
                else:
                    take=False
                    continue
            elif take:  # taking course description
                dataDict[index]=i.strip()

        # creating matrix
        create_matrix(dataDict)

        # clustering
        courses, words, data = readfile("datamatrix.txt")
        self.clust = hcluster(data, distance=self.choice[self.similarity.get()])

    def drawNodes(self,canvas, clust, x,y, scaling, labels):
        """drawing nodes and the diagram of cluster with a recursive function"""
        if clust.id < 0:
            h1 = getheight(clust.left) * 100
            h2 = getheight(clust.right) * 100
            top = y - (h1 + h2) / 2
            bottom = y + (h1 + h2) / 2
            # Line length
            ll = clust.distance * scaling
            canvas.create_line(top + h1 / 2, x, bottom - h2 / 2,  x, fill="red")
            # Horizontal line to left item
            canvas.create_line(top + h1 / 2, x, top + h1 / 2, x + ll, fill="red")
            # Horizontal line to right item
            canvas.create_line( bottom - h2 / 2, x, bottom - h2 / 2, x + ll, fill="red" )
            self.drawNodes(canvas, clust.left, x + ll, top + h1 / 2, scaling, labels)
            self.drawNodes(canvas, clust.right, x + ll, bottom - h2 / 2, scaling, labels)
        else:
            canvas.create_text((y - 7, x + 5), text=labels[clust.id].split()[0:2])

def main():
    root = Tk()
    root.title("Course Analyzer - Sehir Limited Edition")
    root.resizable(width=FALSE, height=FALSE)
    app = GUI(root)
    root.mainloop()

main()